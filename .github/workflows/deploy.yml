name: Deploy Jalwa Firebase Video Chat Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy (default = main)"
        required: true
        default: "main"

env:
  NODE_VERSION: '18'
  SERVER_NAME: 'jalwa-firebase-server'
  SERVER_IP: '72.60.99.164'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy Firebase Video Chat Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /var/www/video-calling-server/jalwa-video-call-app

          # Determine which branch to deploy
          DEPLOY_BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          echo "🚀 Deploying branch: $DEPLOY_BRANCH"

          echo "🔄 Stopping current Firebase server..."
          pm2 stop ${SERVER_NAME} || true
          pm2 delete ${SERVER_NAME} || true
          
          echo "📥 Pulling latest changes..."
          git fetch origin
          if git show-ref --verify --quiet refs/heads/$DEPLOY_BRANCH; then
            git checkout $DEPLOY_BRANCH
            git reset --hard origin/$DEPLOY_BRANCH
          else
            git checkout -b $DEPLOY_BRANCH origin/$DEPLOY_BRANCH
          fi
          
          echo "📦 Installing dependencies..."
          rm -rf node_modules package-lock.json
          npm install --production
          
          echo "🔍 Verifying Firebase Admin SDK..."
          if ! npm list firebase-admin > /dev/null 2>&1; then
            echo "⚠️ Firebase Admin SDK not found, installing..."
            npm install firebase-admin --save
          fi
          
          echo "📁 Ensuring directories..."
          mkdir -p logs uploads
          
          echo "🔐 Checking Firebase service account key..."
          if [ -f "firebase-service-account-key.json" ]; then
            chmod 600 firebase-service-account-key.json
            python3 -m json.tool firebase-service-account-key.json > /dev/null 2>&1 || {
              echo "❌ Invalid firebase-service-account-key.json!"
              exit 1
            }
          else
            echo "❌ firebase-service-account-key.json missing!"
            exit 1
          fi
          
          echo "🔍 Checking ecosystem.config.js..."
          [ -f "ecosystem.config.js" ] || { echo "❌ ecosystem.config.js missing!"; exit 1; }
          
          echo "🧹 Clearing PM2 logs..."
          pm2 flush
          
          echo "🚀 Starting Firebase server..."
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          echo "⏳ Waiting for server startup..."
          sleep 15
          
          if pm2 list | grep -q "${SERVER_NAME}.*online"; then
            echo "✅ PM2 Firebase server is online!"
          else
            echo "❌ Server failed to start!"
            pm2 logs ${SERVER_NAME} --lines 30 --nostream
            exit 1
          fi
          
          echo "🌐 Testing health endpoint..."
          for i in {1..5}; do
            if curl -f -m 10 http://${SERVER_IP}:4000/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "⚠️ Health check failed (attempt $i)..."
              sleep 5
              [ $i -eq 5 ] && exit 1
            fi
          done
          
          echo "📊 Checking stats..."
          curl -s http://${SERVER_IP}:4000/stats || echo "⚠️ Stats not available"
          
          echo "👥 Checking Firebase users..."
          curl -s http://${SERVER_IP}:4000/firebase-users || echo "⚠️ Users endpoint not available"
          
          echo "🎉 Deployment completed successfully!"

    - name: Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "🔥 Server: http://${{ env.SERVER_IP }}:4000"
        else
          echo "❌ DEPLOYMENT FAILED!"
          echo "🔧 Check server logs with: pm2 logs ${{ env.SERVER_NAME }}"
        fi
